buildscript {
	ext {
		springBootVersion = '2.1.0.BUILD-SNAPSHOT'
		aptVersion = '0.15'
	}
	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'

group = 'media'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_1_10

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradleVersion}"
}

ext {
	springCloudVersion = 'Finchley.BUILD-SNAPSHOT'
    mapStructVersion = '1.2.0.Final'
    gradleVersion = '4,8'
    jacocoVersion = '0.8.1'
	minioVersion = '4.0.1'
    apacheCommonsCollectionVersion = '4.1'
    apacheCommonsLangVersion = '3.7'
    hamcrestVersion = '1.3'
    commonsIoVersion = '2.6'
    javaCvVersion = '1.4.1'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')
	compile('org.springframework.boot:spring-boot-starter-aop')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("io.minio:minio:${minioVersion}")
	compile('org.freemarker:freemarker')
	compile('org.springframework.boot:spring-boot-starter-freemarker')
	compile('com.google.guava:guava')
    compile("org.apache.commons:commons-collections4:${apacheCommonsCollectionVersion}")
    compile("org.apache.commons:commons-lang3:${apacheCommonsLangVersion}")
	compile("commons-io:commons-io:${commonsIoVersion}")
	compile("org.bytedeco:javacv-platform:${javaCvVersion}")
    compile('org.springframework.boot:spring-boot-starter-data-cassandra-reactive')
	runtime('org.springframework.boot:spring-boot-devtools')
	compileOnly('org.projectlombok:lombok')
    compile("org.mapstruct:mapstruct-jdk8:${mapStructVersion}")
    compileOnly("org.mapstruct:mapstruct-processor:${mapStructVersion}")
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile("org.hamcrest:hamcrest-all:${hamcrestVersion}")
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination "${buildDir}/reports/jacoco/report.xml"
		html.enabled false
		csv.enabled false
	}

	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: ['**/configuration/**'])
		})
	}
}

jacoco {
    toolVersion = "${jacocoVersion}"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

tasks.withType(JavaCompile) {
    options.compilerArgs = [
            '-Amapstruct.suppressGeneratorTimestamp=true'
    ]
}

check.dependsOn jacocoTestReport
